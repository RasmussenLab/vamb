function get_nbins(binning::Binning, recall::Real, precision::Real; tax_level::Integer=0, assembly::Bool=false)::Integer
    ri = searchsortedfirst(binning.recalls, recall)
    ri > length(binning.recalls) && error("Binning did not benchmark at that high recall")
    pi = searchsortedfirst(binning.precisions, precision)
    pi > length(binning.precisions) && error("Binning did not benchmark at that high precision")
    matrices = assembly ? binning.recovered_asms : binning.recovered_genomes
    if tax_level + 1 âˆ‰ eachindex(matrices)
        error(lazy"Requested bins at taxonomic level $tax_level but have only level 0:$(lastindex(matrices)-1)")
    end
    m = matrices[tax_level + 1]
    m[pi, ri]
end

result_df = DataFrame(folder=String[], genomes=Int[], assemblies=Int[], level=String[])

vars = ["Oral", "Skin", "Urogenital", "Airways", "Gastrointestinal"]

for var in vars
    ref_file = "/home/projects/cpr_10006/people/paupie/vaevae/spades_ef_refs_/ref_spades_$(var).json"
    ref =  open(i -> Reference(i), ref_file)
    for file_path in ["/home/projects/cpr_10006/people/svekut/cami2_$(var)_reassembled_1/vaevae_clusters.tsv", "/home/projects/cpr_10006/people/svekut/cami2_$(var)_reclustering_reassembled_1/clusters_reclustered.tsv"]
        # Check if the file exists before calling the function
        if isfile(file_path)
            bins = open(i -> Binning(i, ref), file_path)

            output_genomes = get_nbins(bins, 0.95, 0.9, tax_level=0, assembly=false)
            output_as = get_nbins(bins, 0.95, 0.9, tax_level=0, assembly=true)

            output_genomes_sp = get_nbins(bins, 0.95, 0.9, tax_level=1, assembly=false)
            output_as_sp = get_nbins(bins, 0.95, 0.9, tax_level=1, assembly=true)

            output_genomes_g = get_nbins(bins, 0.95, 0.9, tax_level=2, assembly=false)
            output_as_g = get_nbins(bins, 0.95, 0.9, tax_level=2, assembly=true)

            # Append the result to the DataFrame
            push!(result_df, (file_path, output_genomes, output_as, "Strain"))
            push!(result_df, (file_path, output_genomes_sp, output_as_sp, "Species"))
            push!(result_df, (file_path, output_genomes_g, output_as_g, "Genus"))
        else
            println("File $file_path not found")
        end
    end
    bins = gold_standard(ref)
    output_genomes = get_nbins(bins, 0.95, 0.9, tax_level=0, assembly=false)
    output_as = get_nbins(bins, 0.95, 0.9, tax_level=0, assembly=true)

    output_genomes_sp = get_nbins(bins, 0.95, 0.9, tax_level=1, assembly=false)
    output_as_sp = get_nbins(bins, 0.95, 0.9, tax_level=1, assembly=true)

    output_genomes_g = get_nbins(bins, 0.95, 0.9, tax_level=2, assembly=false)
    output_as_g = get_nbins(bins, 0.95, 0.9, tax_level=2, assembly=true)

    # Append the result to the DataFrame
    push!(result_df, ("gold_standard_$(var)", output_genomes, output_as, "Strain"))
    push!(result_df, ("gold_standard_$(var)", output_genomes_sp, output_as_sp, "Species"))
    push!(result_df, ("gold_standard_$(var)", output_genomes_g, output_as_g, "Genus"))
end
